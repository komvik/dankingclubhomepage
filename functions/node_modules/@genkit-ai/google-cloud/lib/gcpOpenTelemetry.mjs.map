{"version":3,"sources":["../src/gcpOpenTelemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExporterOptions,\n  MetricExporter,\n} from '@google-cloud/opentelemetry-cloud-monitoring-exporter';\nimport { TraceExporter } from '@google-cloud/opentelemetry-cloud-trace-exporter';\nimport { GcpDetectorSync } from '@google-cloud/opentelemetry-resource-util';\nimport { Span, SpanStatusCode, TraceFlags } from '@opentelemetry/api';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport {\n  ExportResult,\n  hrTimeDuration,\n  hrTimeToMilliseconds,\n} from '@opentelemetry/core';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { PinoInstrumentation } from '@opentelemetry/instrumentation-pino';\nimport { WinstonInstrumentation } from '@opentelemetry/instrumentation-winston';\nimport { Resource } from '@opentelemetry/resources';\nimport {\n  AggregationTemporality,\n  DefaultAggregation,\n  ExponentialHistogramAggregation,\n  InMemoryMetricExporter,\n  InstrumentType,\n  PeriodicExportingMetricReader,\n  PushMetricExporter,\n  ResourceMetrics,\n} from '@opentelemetry/sdk-metrics';\nimport { NodeSDKConfiguration } from '@opentelemetry/sdk-node';\nimport {\n  BatchSpanProcessor,\n  InMemorySpanExporter,\n  ReadableSpan,\n  SpanExporter,\n} from '@opentelemetry/sdk-trace-base';\nimport { GENKIT_VERSION } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { PathMetadata } from 'genkit/tracing';\nimport { actionTelemetry } from './telemetry/action.js';\nimport { engagementTelemetry } from './telemetry/engagement.js';\nimport { featuresTelemetry } from './telemetry/feature.js';\nimport { generateTelemetry } from './telemetry/generate.js';\nimport { pathsTelemetry } from './telemetry/path.js';\nimport { GcpTelemetryConfig } from './types.js';\nimport {\n  extractErrorName,\n  metricsDenied,\n  metricsDeniedHelpText,\n  tracingDenied,\n  tracingDeniedHelpText,\n} from './utils.js';\n\nlet metricExporter: PushMetricExporter;\nlet spanProcessor: BatchSpanProcessor;\nlet spanExporter: AdjustingTraceExporter;\n\n/**\n * Provides a {TelemetryConfig} for exporting OpenTelemetry data (Traces,\n * Metrics, and Logs) to the Google Cloud Operations Suite.\n */\nexport class GcpOpenTelemetry {\n  private readonly config: GcpTelemetryConfig;\n  private readonly resource: Resource;\n\n  constructor(config: GcpTelemetryConfig) {\n    this.config = config;\n    this.resource = new Resource({ type: 'global' }).merge(\n      new GcpDetectorSync().detect()\n    );\n  }\n\n  /**\n   * Log hook for writing trace and span metadata to log messages in the format\n   * required by GCP.\n   */\n  private gcpTraceLogHook = (span: Span, record: any) => {\n    const spanContext = span.spanContext();\n    const isSampled = !!(spanContext.traceFlags & TraceFlags.SAMPLED);\n    const projectId = this.config.projectId;\n\n    record['logging.googleapis.com/trace'] ??=\n      `projects/${projectId}/traces/${spanContext.traceId}`;\n    record['logging.googleapis.com/trace_sampled'] ??= isSampled ? '1' : '0';\n    record['logging.googleapis.com/spanId'] ??= spanContext.spanId;\n\n    // Clear out the duplicate trace and span information in the log metadata.\n    // These will be incorrect for logs written during span export time since\n    // the logs are written after the span has fully executed. Those logs are\n    // explicitly tied to the correct span in createCommonLogAttributes in\n    // utils.ts.\n    delete record['span_id'];\n    delete record['trace_id'];\n    delete record['trace_flags'];\n  };\n\n  async getConfig(): Promise<Partial<NodeSDKConfiguration>> {\n    spanProcessor = new BatchSpanProcessor(await this.createSpanExporter());\n    return {\n      resource: this.resource,\n      spanProcessor: spanProcessor,\n      sampler: this.config.sampler,\n      instrumentations: this.getInstrumentations(),\n      metricReader: await this.createMetricReader(),\n    };\n  }\n\n  private async createSpanExporter(): Promise<SpanExporter> {\n    spanExporter = new AdjustingTraceExporter(\n      this.shouldExportTraces()\n        ? new TraceExporter({\n            // Creds for non-GCP environments; otherwise credentials will be\n            // automatically detected via ADC\n            credentials: this.config.credentials,\n          })\n        : new InMemorySpanExporter(),\n      this.config.exportIO,\n      this.config.projectId,\n      getErrorHandler(\n        (err) => {\n          return tracingDenied(err);\n        },\n        await tracingDeniedHelpText()\n      )\n    );\n    return spanExporter;\n  }\n\n  /**\n   * Creates a {MetricReader} for pushing metrics out to GCP via OpenTelemetry.\n   */\n  private async createMetricReader(): Promise<PeriodicExportingMetricReader> {\n    metricExporter = await this.buildMetricExporter();\n    return new PeriodicExportingMetricReader({\n      exportIntervalMillis: this.config.metricExportIntervalMillis,\n      exportTimeoutMillis: this.config.metricExportTimeoutMillis,\n      exporter: metricExporter,\n    });\n  }\n\n  /** Gets all open telemetry instrumentations as configured by the plugin. */\n  private getInstrumentations() {\n    if (this.config.autoInstrumentation) {\n      return getNodeAutoInstrumentations(\n        this.config.autoInstrumentationConfig\n      ).concat(this.getDefaultLoggingInstrumentations());\n    }\n    return this.getDefaultLoggingInstrumentations();\n  }\n\n  private shouldExportTraces(): boolean {\n    return this.config.export && !this.config.disableTraces;\n  }\n\n  private shouldExportMetrics(): boolean {\n    return this.config.export && !this.config.disableMetrics;\n  }\n\n  /** Always configure the Pino and Winston instrumentations */\n  private getDefaultLoggingInstrumentations(): Instrumentation[] {\n    return [\n      new WinstonInstrumentation({ logHook: this.gcpTraceLogHook }),\n      new PinoInstrumentation({ logHook: this.gcpTraceLogHook }),\n    ];\n  }\n\n  private async buildMetricExporter(): Promise<PushMetricExporter> {\n    const exporter: PushMetricExporter = this.shouldExportMetrics()\n      ? new MetricExporterWrapper(\n          {\n            userAgent: {\n              product: 'genkit',\n              version: GENKIT_VERSION,\n            },\n            // Creds for non-GCP environments; otherwise credentials will be\n            // automatically detected via ADC\n            credentials: this.config.credentials,\n          },\n          getErrorHandler(\n            (err) => {\n              return metricsDenied(err);\n            },\n            await metricsDeniedHelpText()\n          )\n        )\n      : new InMemoryMetricExporter(AggregationTemporality.DELTA);\n    exporter.selectAggregation = (instrumentType: InstrumentType) => {\n      if (instrumentType === InstrumentType.HISTOGRAM) {\n        return new ExponentialHistogramAggregation();\n      }\n      return new DefaultAggregation();\n    };\n    exporter.selectAggregationTemporality = (\n      instrumentType: InstrumentType\n    ) => {\n      return AggregationTemporality.DELTA;\n    };\n    return exporter;\n  }\n}\n\n/**\n * Rewrites the export method to include an error handler which logs\n * helpful information about how to set up metrics/telemetry in GCP.\n */\nclass MetricExporterWrapper extends MetricExporter {\n  constructor(\n    private options?: ExporterOptions,\n    private errorHandler?: (error: Error) => void\n  ) {\n    super(options);\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    super.export(metrics, (result) => {\n      if (this.errorHandler && result.error) {\n        this.errorHandler(result.error);\n      }\n      resultCallback(result);\n    });\n  }\n}\n\n/**\n * Adjusts spans before exporting to GCP. Redacts model input\n * and output content, and augments span attributes before sending to GCP.\n */\nclass AdjustingTraceExporter implements SpanExporter {\n  constructor(\n    private exporter: SpanExporter,\n    private logIO: boolean,\n    private projectId?: string,\n    private errorHandler?: (error: Error) => void\n  ) {}\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this.exporter?.export(this.adjust(spans), (result) => {\n      if (this.errorHandler && result.error) {\n        this.errorHandler(result.error);\n      }\n      resultCallback(result);\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.exporter?.shutdown();\n  }\n\n  getExporter(): SpanExporter {\n    return this.exporter;\n  }\n\n  forceFlush(): Promise<void> {\n    if (this.exporter?.forceFlush) {\n      return this.exporter.forceFlush();\n    }\n    return Promise.resolve();\n  }\n\n  private adjust(spans: ReadableSpan[]): ReadableSpan[] {\n    const allPaths = spans\n      .filter((span) => span.attributes['genkit:path'])\n      .map(\n        (span) =>\n          ({\n            path: span.attributes['genkit:path'] as string,\n            status:\n              (span.attributes['genkit:state'] as string) === 'error'\n                ? 'failure'\n                : 'success',\n            error: extractErrorName(span.events),\n            latency: hrTimeToMilliseconds(\n              hrTimeDuration(span.startTime, span.endTime)\n            ),\n          }) as PathMetadata\n      );\n\n    const allLeafPaths = new Set<PathMetadata>(\n      allPaths.filter((leafPath) =>\n        allPaths.every(\n          (path) =>\n            path.path === leafPath.path ||\n            !path.path.startsWith(leafPath.path) ||\n            (path.path.startsWith(leafPath.path) &&\n              path.status !== leafPath.status)\n        )\n      )\n    );\n\n    return spans.map((span) => {\n      this.tickTelemetry(span, allLeafPaths);\n\n      span = this.redactInputOutput(span);\n      span = this.markErrorSpanAsError(span);\n      span = this.markFailedSpan(span);\n      span = this.markGenkitFeature(span);\n      span = this.markGenkitModel(span);\n      span = this.normalizeLabels(span);\n      return span;\n    });\n  }\n\n  private tickTelemetry(span: ReadableSpan, paths: Set<PathMetadata>) {\n    const attributes = span.attributes;\n    if (!Object.keys(attributes).includes('genkit:type')) {\n      return;\n    }\n\n    const type = attributes['genkit:type'] as string;\n    const subtype = attributes['genkit:metadata:subtype'] as string;\n    const isRoot = !!span.attributes['genkit:isRoot'];\n    const unused: Set<PathMetadata> = new Set();\n\n    if (isRoot) {\n      // Report top level feature request and latency only for root spans\n      // Log input to and output from to the feature\n      featuresTelemetry.tick(span, unused, this.logIO, this.projectId);\n      // Report executions and latency for all flow paths only on the root span\n      pathsTelemetry.tick(span, paths, this.logIO, this.projectId);\n      // Set root status explicitly\n      span.attributes['genkit:rootState'] = span.attributes['genkit:state'];\n    }\n    if (type === 'action' && subtype === 'model') {\n      // Report generate metrics () for all model actions\n      generateTelemetry.tick(span, unused, this.logIO, this.projectId);\n    }\n    if (type === 'action' && subtype === 'tool') {\n      // TODO: Report input and output for tool actions\n    }\n    if (type === 'action' || type === 'flow' || type == 'flowStep') {\n      // Report request and latency metrics for all actions\n      actionTelemetry.tick(span, unused, this.logIO, this.projectId);\n    }\n    if (type === 'userEngagement') {\n      // Report user acceptance and feedback metrics\n      engagementTelemetry.tick(span, unused, this.logIO, this.projectId);\n    }\n  }\n\n  private redactInputOutput(span: ReadableSpan): ReadableSpan {\n    const hasInput = 'genkit:input' in span.attributes;\n    const hasOutput = 'genkit:output' in span.attributes;\n\n    return !hasInput && !hasOutput\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            'genkit:input': '<redacted>',\n            'genkit:output': '<redacted>',\n          },\n        };\n  }\n\n  // This is a workaround for GCP Trace to mark a span with a red\n  // exclamation mark indicating that it is an error.\n  private markErrorSpanAsError(span: ReadableSpan): ReadableSpan {\n    return span.status.code !== SpanStatusCode.ERROR\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            '/http/status_code': '599',\n          },\n        };\n  }\n\n  // This is a workaround for GCP Trace to mark a span with a red\n  // exclamation mark indicating that it is an error.\n  private normalizeLabels(span: ReadableSpan): ReadableSpan {\n    const normalized = {} as Record<string, any>;\n    for (const [key, value] of Object.entries(span.attributes)) {\n      normalized[key.replace(/\\:/g, '/')] = value;\n    }\n    return {\n      ...span,\n      spanContext: span.spanContext,\n      attributes: normalized,\n    };\n  }\n\n  private markFailedSpan(span: ReadableSpan): ReadableSpan {\n    if (\n      span.attributes['genkit:state'] === 'error' &&\n      (span.attributes['genkit:type'] === 'action' ||\n        span.attributes['genkit:type'] === 'flowStep' ||\n        span.attributes['genkit:type'] === 'helper')\n    ) {\n      if (!!span.attributes['genkit:name']) {\n        span.attributes['genkit:failedSpan'] = span.attributes['genkit:name'];\n      }\n      if (!!span.attributes['genkit:path']) {\n        span.attributes['genkit:failedPath'] = span.attributes['genkit:path'];\n      }\n    }\n    return span;\n  }\n\n  private markGenkitFeature(span: ReadableSpan): ReadableSpan {\n    if (span.attributes['genkit:isRoot'] && !!span.attributes['genkit:name']) {\n      span.attributes['genkit:feature'] = span.attributes['genkit:name'];\n    }\n    return span;\n  }\n\n  private markGenkitModel(span: ReadableSpan): ReadableSpan {\n    if (\n      span.attributes['genkit:metadata:subtype'] === 'model' &&\n      !!span.attributes['genkit:name']\n    ) {\n      span.attributes['genkit:model'] = span.attributes['genkit:name'];\n    }\n    return span;\n  }\n}\n\nfunction getErrorHandler(\n  shouldLogFn: (err: Error) => boolean,\n  helpText: string\n): (err: Error) => void {\n  // only log the first time\n  let instructionsLogged = false;\n\n  return (err) => {\n    // Use the defaultLogger so that logs don't get swallowed by the open\n    // telemetry exporter\n    const defaultLogger = logger.defaultLogger;\n    if (err && shouldLogFn(err)) {\n      if (!instructionsLogged) {\n        instructionsLogged = true;\n        defaultLogger.error(\n          `Unable to send telemetry to Google Cloud: ${err.message}\\n\\n${helpText}\\n`\n        );\n      }\n    } else if (err) {\n      defaultLogger.error(`Unable to send telemetry to Google Cloud: ${err}`);\n    }\n  };\n}\n\nexport function __getMetricExporterForTesting(): InMemoryMetricExporter {\n  return metricExporter as InMemoryMetricExporter;\n}\n\nexport function __getSpanExporterForTesting(): InMemorySpanExporter {\n  return spanExporter.getExporter() as InMemorySpanExporter;\n}\n\nexport function __forceFlushSpansForTesting() {\n  spanProcessor.forceFlush();\n}\n"],"mappings":"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","names":[]}