{"version":3,"sources":["../src/gcpLogger.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggingWinston } from '@google-cloud/logging-winston';\nimport { getCurrentEnv } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { Writable } from 'stream';\nimport { GcpTelemetryConfig } from './types.js';\nimport { loggingDenied, loggingDeniedHelpText } from './utils.js';\n\n/**\n * Additional streams for writing log data to. Useful for unit testing.\n */\nlet additionalStream: Writable;\n\n/**\n * Provides a logger for exporting Genkit debug logs to GCP Cloud\n * logs.\n */\nexport class GcpLogger {\n  constructor(private readonly config: GcpTelemetryConfig) {}\n\n  async getLogger(env: string) {\n    // Dynamically importing winston here more strictly controls\n    // the import order relative to registering instrumentation\n    // with OpenTelemetry. Incorrect import order will trigger\n    // an internal OT warning and will result in logs not being\n    // associated with correct spans/traces.\n    const winston = await import('winston');\n    const format = this.shouldExport(env)\n      ? { format: winston.format.json() }\n      : {\n          format: winston.format.printf((info): string => {\n            return `[${info.level}] ${info.message}`;\n          }),\n        };\n\n    let transports: any[] = [];\n    transports.push(\n      this.shouldExport(env)\n        ? new LoggingWinston({\n            projectId: this.config.projectId,\n            labels: { module: 'genkit' },\n            prefix: 'genkit',\n            logName: 'genkit_log',\n            credentials: this.config.credentials,\n            autoRetry: true,\n            defaultCallback: await this.getErrorHandler(),\n          })\n        : new winston.transports.Console()\n    );\n    if (additionalStream) {\n      transports.push(\n        new winston.transports.Stream({ stream: additionalStream })\n      );\n    }\n    return winston.createLogger({\n      transports: transports,\n      ...format,\n      exceptionHandlers: [new winston.transports.Console()],\n    });\n  }\n\n  private async getErrorHandler(): Promise<(err: Error | null) => void> {\n    // only log the first time\n    let instructionsLogged = false;\n    let helpInstructions = await loggingDeniedHelpText();\n\n    return async (err: Error | null) => {\n      // Use the defaultLogger so that logs don't get swallowed by\n      // the open telemetry exporter\n      const defaultLogger = logger.defaultLogger;\n      if (err && loggingDenied(err)) {\n        if (!instructionsLogged) {\n          instructionsLogged = true;\n          defaultLogger.error(\n            `Unable to send logs to Google Cloud: ${err.message}\\n\\n${helpInstructions}\\n`\n          );\n        }\n      } else if (err) {\n        defaultLogger.error(`Unable to send logs to Google Cloud: ${err}`);\n      }\n\n      if (err) {\n        // Assume the logger is compromised, and we need a new one\n        // Reinitialize the genkit logger with a new instance with the same config\n        logger.init(\n          await new GcpLogger(this.config).getLogger(getCurrentEnv())\n        );\n        defaultLogger.info('Initialized a new GcpLogger.');\n      }\n    };\n  }\n\n  private shouldExport(env?: string) {\n    return this.config.export;\n  }\n}\n\nexport function __addTransportStreamForTesting(stream: Writable) {\n  additionalStream = stream;\n}\n"],"mappings":";;;;;AAgBA,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,SAAS,cAAc;AAGvB,SAAS,eAAe,6BAA6B;AAKrD,IAAI;AAMG,MAAM,UAAU;AAAA,EACrB,YAA6B,QAA4B;AAA5B;AAAA,EAA6B;AAAA,EAEpD,UAAU,KAAa;AAAA;AAM3B,YAAM,UAAU,MAAM,OAAO,SAAS;AACtC,YAAM,SAAS,KAAK,aAAa,GAAG,IAChC,EAAE,QAAQ,QAAQ,OAAO,KAAK,EAAE,IAChC;AAAA,QACE,QAAQ,QAAQ,OAAO,OAAO,CAAC,SAAiB;AAC9C,iBAAO,IAAI,KAAK,KAAK,KAAK,KAAK,OAAO;AAAA,QACxC,CAAC;AAAA,MACH;AAEJ,UAAI,aAAoB,CAAC;AACzB,iBAAW;AAAA,QACT,KAAK,aAAa,GAAG,IACjB,IAAI,eAAe;AAAA,UACjB,WAAW,KAAK,OAAO;AAAA,UACvB,QAAQ,EAAE,QAAQ,SAAS;AAAA,UAC3B,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,aAAa,KAAK,OAAO;AAAA,UACzB,WAAW;AAAA,UACX,iBAAiB,MAAM,KAAK,gBAAgB;AAAA,QAC9C,CAAC,IACD,IAAI,QAAQ,WAAW,QAAQ;AAAA,MACrC;AACA,UAAI,kBAAkB;AACpB,mBAAW;AAAA,UACT,IAAI,QAAQ,WAAW,OAAO,EAAE,QAAQ,iBAAiB,CAAC;AAAA,QAC5D;AAAA,MACF;AACA,aAAO,QAAQ,aAAa;AAAA,QAC1B;AAAA,SACG,SAFuB;AAAA,QAG1B,mBAAmB,CAAC,IAAI,QAAQ,WAAW,QAAQ,CAAC;AAAA,MACtD,EAAC;AAAA,IACH;AAAA;AAAA,EAEc,kBAAwD;AAAA;AAEpE,UAAI,qBAAqB;AACzB,UAAI,mBAAmB,MAAM,sBAAsB;AAEnD,aAAO,CAAO,QAAsB;AAGlC,cAAM,gBAAgB,OAAO;AAC7B,YAAI,OAAO,cAAc,GAAG,GAAG;AAC7B,cAAI,CAAC,oBAAoB;AACvB,iCAAqB;AACrB,0BAAc;AAAA,cACZ,wCAAwC,IAAI,OAAO;AAAA;AAAA,EAAO,gBAAgB;AAAA;AAAA,YAC5E;AAAA,UACF;AAAA,QACF,WAAW,KAAK;AACd,wBAAc,MAAM,wCAAwC,GAAG,EAAE;AAAA,QACnE;AAEA,YAAI,KAAK;AAGP,iBAAO;AAAA,YACL,MAAM,IAAI,UAAU,KAAK,MAAM,EAAE,UAAU,cAAc,CAAC;AAAA,UAC5D;AACA,wBAAc,KAAK,8BAA8B;AAAA,QACnD;AAAA,MACF;AAAA,IACF;AAAA;AAAA,EAEQ,aAAa,KAAc;AACjC,WAAO,KAAK,OAAO;AAAA,EACrB;AACF;AAEO,SAAS,+BAA+B,QAAkB;AAC/D,qBAAmB;AACrB;","names":[]}