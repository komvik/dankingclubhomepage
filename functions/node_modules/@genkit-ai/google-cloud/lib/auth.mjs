import {
  __async
} from "./chunk-E3LOUS7X.mjs";
import { logger } from "genkit/logging";
import { auth, GoogleAuth } from "google-auth-library";
function credentialsFromEnvironment() {
  return __async(this, null, function* () {
    let authClient;
    let options = {};
    if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {
      const serviceAccountCreds = JSON.parse(
        process.env.GCLOUD_SERVICE_ACCOUNT_CREDS
      );
      const authOptions = { credentials: serviceAccountCreds };
      authClient = new GoogleAuth(authOptions);
      options.credentials = yield authClient.getCredentials();
    } else {
      authClient = new GoogleAuth();
    }
    try {
      const projectId = yield authClient.getProjectId();
      if (projectId && projectId.length > 0) {
        options.projectId = projectId;
      }
    } catch (error) {
      logger.warn(error);
    }
    return options;
  });
}
function resolveCurrentPrincipal() {
  return __async(this, null, function* () {
    var _a, _b;
    const envCredentials = yield credentialsFromEnvironment();
    const adcCredentials = yield auth.getCredentials();
    let serviceAccountEmail = (_b = (_a = envCredentials.credentials) == null ? void 0 : _a.client_email) != null ? _b : adcCredentials.client_email;
    return {
      projectId: envCredentials.projectId,
      serviceAccountEmail
    };
  });
}
export {
  credentialsFromEnvironment,
  resolveCurrentPrincipal
};
//# sourceMappingURL=auth.mjs.map