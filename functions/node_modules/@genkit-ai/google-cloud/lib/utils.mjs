import {
  __async
} from "./chunk-E3LOUS7X.mjs";
import { TraceFlags } from "@opentelemetry/api";
import { resolveCurrentPrincipal } from "./auth.js";
function extractOuterFlowNameFromPath(path) {
  if (!path || path === "<unknown>") {
    return "<unknown>";
  }
  const flowName = path.match("/{(.+),t:flow}+");
  return flowName ? flowName[1] : "<unknown>";
}
function extractOuterFeatureNameFromPath(path) {
  if (!path || path === "<unknown>") {
    return "<unknown>";
  }
  const first = path.split("/")[1];
  const featureName = first == null ? void 0 : first.match("{(.+),t:(flow|action|prompt|helper)");
  return featureName ? featureName[1] : "<unknown>";
}
function extractErrorName(events) {
  return events.filter((event) => event.name === "exception").map((event) => {
    const attributes = event.attributes;
    return attributes ? attributes["exception.type"] : "<unknown>";
  }).at(0);
}
function extractErrorMessage(events) {
  return events.filter((event) => event.name === "exception").map((event) => {
    const attributes = event.attributes;
    return attributes ? attributes["exception.message"] : "<unknown>";
  }).at(0);
}
function extractErrorStack(events) {
  return events.filter((event) => event.name === "exception").map((event) => {
    const attributes = event.attributes;
    return attributes ? attributes["exception.stacktrace"] : "<unknown>";
  }).at(0);
}
function createCommonLogAttributes(span, projectId) {
  const spanContext = span.spanContext();
  const isSampled = !!(spanContext.traceFlags & TraceFlags.SAMPLED);
  return {
    "logging.googleapis.com/spanId": spanContext.spanId,
    "logging.googleapis.com/trace": `projects/${projectId}/traces/${spanContext.traceId}`,
    "logging.googleapis.com/trace_sampled": isSampled ? "1" : "0"
  };
}
function requestDenied(err) {
  return err.code === 7;
}
function loggingDenied(err) {
  var _a;
  return requestDenied(err) && ((_a = err.statusDetails) == null ? void 0 : _a.some((details) => {
    var _a2;
    return ((_a2 = details == null ? void 0 : details.metadata) == null ? void 0 : _a2.permission) === "logging.logEntries.create";
  }));
}
function tracingDenied(err) {
  return requestDenied(err);
}
function metricsDenied(err) {
  return requestDenied(err);
}
function permissionDeniedHelpText(role) {
  return __async(this, null, function* () {
    var _a;
    const principal = yield resolveCurrentPrincipal();
    return `Add the role '${role}' to your Service Account in the IAM & Admin page on the Google Cloud console, or use the following command:

gcloud projects add-iam-policy-binding ${(_a = principal.projectId) != null ? _a : "${PROJECT_ID}"} \\
    --member=serviceAccount:${principal.serviceAccountEmail || "${SERVICE_ACCT}"} \\
    --role=${role}`;
  });
}
function loggingDeniedHelpText() {
  return __async(this, null, function* () {
    return permissionDeniedHelpText("roles/logging.logWriter");
  });
}
function tracingDeniedHelpText() {
  return __async(this, null, function* () {
    return permissionDeniedHelpText("roles/cloudtrace.agent");
  });
}
function metricsDeniedHelpText() {
  return __async(this, null, function* () {
    return permissionDeniedHelpText("roles/monitoring.metricWriter");
  });
}
export {
  createCommonLogAttributes,
  extractErrorMessage,
  extractErrorName,
  extractErrorStack,
  extractOuterFeatureNameFromPath,
  extractOuterFlowNameFromPath,
  loggingDenied,
  loggingDeniedHelpText,
  metricsDenied,
  metricsDeniedHelpText,
  permissionDeniedHelpText,
  requestDenied,
  tracingDenied,
  tracingDeniedHelpText
};
//# sourceMappingURL=utils.mjs.map