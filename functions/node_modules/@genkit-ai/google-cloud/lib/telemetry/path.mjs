import {
  __spreadProps,
  __spreadValues
} from "../chunk-E3LOUS7X.mjs";
import { ValueType } from "@opentelemetry/api";
import { hrTimeDuration, hrTimeToMilliseconds } from "@opentelemetry/core";
import { GENKIT_VERSION } from "genkit";
import { logger } from "genkit/logging";
import { toDisplayPath } from "genkit/tracing";
import {
  MetricCounter,
  MetricHistogram,
  internalMetricNamespaceWrap
} from "../metrics.js";
import {
  createCommonLogAttributes,
  extractErrorMessage,
  extractErrorName,
  extractErrorStack
} from "../utils.js";
class PathsTelemetry {
  constructor() {
    /**
     * Wraps the declared metrics in a Genkit-specific, internal namespace.
     */
    this._N = internalMetricNamespaceWrap.bind(null, "feature");
    this.pathCounter = new MetricCounter(this._N("path/requests"), {
      description: "Tracks unique flow paths per flow.",
      valueType: ValueType.INT
    });
    this.pathLatencies = new MetricHistogram(this._N("path/latency"), {
      description: "Latencies per flow path.",
      ValueType: ValueType.DOUBLE,
      unit: "ms"
    });
  }
  tick(span, paths, logIO, projectId) {
    const attributes = span.attributes;
    const name = attributes["genkit:name"];
    const path = attributes["genkit:path"];
    const latencyMs = hrTimeToMilliseconds(
      hrTimeDuration(span.startTime, span.endTime)
    );
    const state = attributes["genkit:state"];
    if (state === "success") {
      this.writePathSuccess(span, paths, name, path, latencyMs, projectId);
      return;
    }
    if (state === "error") {
      const errorName = extractErrorName(span.events) || "<unknown>";
      const errorMessage = extractErrorMessage(span.events) || "<unknown>";
      const errorStack = extractErrorStack(span.events) || "";
      this.writePathFailure(
        span,
        paths,
        name,
        path,
        latencyMs,
        errorName,
        projectId
      );
      this.recordError(
        span,
        path,
        errorName,
        errorMessage,
        errorStack,
        projectId
      );
      return;
    }
    logger.warn(`Unknown state; ${state}`);
  }
  recordError(span, path, errorName, errorMessage, errorStack, projectId) {
    const displayPath = toDisplayPath(path);
    logger.logStructuredError(`Error[${displayPath}, ${errorName}]`, __spreadProps(__spreadValues({}, createCommonLogAttributes(span, projectId)), {
      path: displayPath,
      qualifiedPath: path,
      name: errorName,
      message: errorMessage,
      stack: errorStack,
      source: "ts",
      sourceVersion: GENKIT_VERSION
    }));
  }
  writePathSuccess(span, paths, featureName, path, latencyMs, projectId) {
    this.writePathMetrics(
      span,
      path,
      paths,
      featureName,
      latencyMs,
      void 0,
      projectId
    );
  }
  writePathFailure(span, paths, featureName, path, latencyMs, errorName, projectId) {
    this.writePathMetrics(
      span,
      path,
      paths,
      featureName,
      latencyMs,
      errorName,
      projectId
    );
  }
  /** Writes all path-level metrics stored in the current flow execution. */
  writePathMetrics(span, rootPath, paths, featureName, latencyMs, err, projectId) {
    const flowPaths = Array.from(paths).filter(
      (meta) => meta.path.includes(featureName)
    );
    if (flowPaths) {
      logger.logStructured(`Paths[${featureName}]`, __spreadProps(__spreadValues({}, createCommonLogAttributes(span, projectId)), {
        flowName: featureName,
        paths: flowPaths.map((p) => toDisplayPath(p.path))
      }));
      flowPaths.forEach((p) => this.writePathMetric(featureName, p));
      if (err && !flowPaths.some((p) => p.status === "failure")) {
        this.writePathMetric(featureName, {
          status: "failure",
          path: rootPath,
          error: err,
          latency: latencyMs
        });
      }
    }
  }
  /** Writes metrics for a single PathMetadata */
  writePathMetric(featureName, meta) {
    const pathDimensions = {
      featureName,
      status: meta.status,
      error: meta.error,
      path: meta.path,
      source: "ts",
      sourceVersion: GENKIT_VERSION
    };
    this.pathCounter.add(1, pathDimensions);
    this.pathLatencies.record(meta.latency, pathDimensions);
  }
}
const pathsTelemetry = new PathsTelemetry();
export {
  pathsTelemetry
};
//# sourceMappingURL=path.mjs.map