"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var feature_exports = {};
__export(feature_exports, {
  featuresTelemetry: () => featuresTelemetry
});
module.exports = __toCommonJS(feature_exports);
var import_api = require("@opentelemetry/api");
var import_core = require("@opentelemetry/core");
var import_genkit = require("genkit");
var import_logging = require("genkit/logging");
var import_tracing = require("genkit/tracing");
var import_metrics = require("../metrics.js");
var import_utils = require("../utils.js");
class FeaturesTelemetry {
  constructor() {
    /**
     * Wraps the declared metrics in a Genkit-specific, internal namespace.
     */
    this._N = import_metrics.internalMetricNamespaceWrap.bind(null, "feature");
    this.featureCounter = new import_metrics.MetricCounter(this._N("requests"), {
      description: "Counts calls to genkit features.",
      valueType: import_api.ValueType.INT
    });
    this.featureLatencies = new import_metrics.MetricHistogram(this._N("latency"), {
      description: "Latencies when calling Genkit features.",
      valueType: import_api.ValueType.DOUBLE,
      unit: "ms"
    });
  }
  tick(span, paths, logIO, projectId) {
    const attributes = span.attributes;
    const name = attributes["genkit:name"];
    const path = attributes["genkit:path"];
    const latencyMs = (0, import_core.hrTimeToMilliseconds)(
      (0, import_core.hrTimeDuration)(span.startTime, span.endTime)
    );
    const isRoot = attributes["genkit:isRoot"];
    if (!isRoot) {
      throw new import_genkit.GenkitError({
        status: "FAILED_PRECONDITION",
        message: "FeatureTelemetry tick called with non-root span."
      });
    }
    const state = attributes["genkit:state"];
    if (state === "success") {
      this.writeFeatureSuccess(name, latencyMs);
    } else if (state === "error") {
      const errorName = (0, import_utils.extractErrorName)(span.events) || "<unknown>";
      this.writeFeatureFailure(name, latencyMs, errorName);
    } else {
      import_logging.logger.warn(`Unknown state; ${state}`);
      return;
    }
    if (logIO) {
      const input = attributes["genkit:input"];
      const output = attributes["genkit:output"];
      if (input) {
        this.recordIO(span, "Input", name, path, input, projectId);
      }
      if (output) {
        this.recordIO(span, "Output", name, path, output, projectId);
      }
    }
  }
  writeFeatureSuccess(featureName, latencyMs) {
    const dimensions = {
      name: featureName,
      status: "success",
      source: "ts",
      sourceVersion: import_genkit.GENKIT_VERSION
    };
    this.featureCounter.add(1, dimensions);
    this.featureLatencies.record(latencyMs, dimensions);
  }
  writeFeatureFailure(featureName, latencyMs, errorName) {
    const dimensions = {
      name: featureName,
      status: "failure",
      source: "ts",
      sourceVersion: import_genkit.GENKIT_VERSION,
      error: errorName
    };
    this.featureCounter.add(1, dimensions);
    this.featureLatencies.record(latencyMs, dimensions);
  }
  recordIO(span, tag, featureName, qualifiedPath, input, projectId) {
    const path = (0, import_tracing.toDisplayPath)(qualifiedPath);
    const sharedMetadata = __spreadProps(__spreadValues({}, (0, import_utils.createCommonLogAttributes)(span, projectId)), {
      path,
      qualifiedPath,
      featureName
    });
    import_logging.logger.logStructured(`${tag}[${path}, ${featureName}]`, __spreadProps(__spreadValues({}, sharedMetadata), {
      content: input
    }));
  }
}
const featuresTelemetry = new FeaturesTelemetry();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  featuresTelemetry
});
//# sourceMappingURL=feature.js.map