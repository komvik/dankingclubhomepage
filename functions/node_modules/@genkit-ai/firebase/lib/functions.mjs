import {
  __async,
  __spreadProps,
  __spreadValues
} from "./chunk-E3LOUS7X.mjs";
import { getAppCheck } from "firebase-admin/app-check";
import {
  onRequest
} from "firebase-functions/v2/https";
import { logger } from "genkit/logging";
import { initializeAppIfNecessary } from "./helpers.js";
function onFlow(genkit, config, steps) {
  const f = genkit.defineStreamingFlow(
    __spreadProps(__spreadValues({}, config), {
      authPolicy: config.authPolicy.policy
    }),
    steps
  ).flow;
  const wrapped = wrapHttpsFlow(genkit, f, config);
  const funcFlow = wrapped;
  funcFlow.flow = f;
  return funcFlow;
}
function wrapHttpsFlow(genkit, flow, config) {
  var _a;
  return onRequest(
    __spreadProps(__spreadValues({}, config.httpsOptions), {
      memory: ((_a = config.httpsOptions) == null ? void 0 : _a.memory) || "512MiB"
    }),
    (req, res) => __async(this, null, function* () {
      if (config.enforceAppCheck) {
        if (!(yield appCheckValid(
          req.headers["x-firebase-appcheck"],
          !!config.consumeAppCheckToken
        ))) {
          const respBody = {
            error: {
              status: "UNAUTHENTICATED",
              message: "Unauthorized"
            }
          };
          logger.logStructured(`Response[/${flow.name}]`, {
            path: `/${flow.name}`,
            code: 401,
            body: respBody
          });
          res.status(401).send(respBody).end();
          return;
        }
      }
      yield config.authPolicy.provider(
        req,
        res,
        () => flow.expressHandler(req, res)
      );
    })
  );
}
function appCheckValid(tok, consume) {
  return __async(this, null, function* () {
    if (typeof tok !== "string") return false;
    initializeAppIfNecessary();
    try {
      const appCheckClaims = yield getAppCheck().verifyToken(tok, { consume });
      if (consume && appCheckClaims.alreadyConsumed) return false;
      return true;
    } catch (e) {
      return false;
    }
  });
}
function noAuth() {
  return {
    provider: (req, res, next) => next(),
    policy: () => {
    }
  };
}
export {
  noAuth,
  onFlow
};
//# sourceMappingURL=functions.mjs.map