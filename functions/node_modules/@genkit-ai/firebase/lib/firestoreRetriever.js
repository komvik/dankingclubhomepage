"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var firestoreRetriever_exports = {};
__export(firestoreRetriever_exports, {
  defineFirestoreRetriever: () => defineFirestoreRetriever
});
module.exports = __toCommonJS(firestoreRetriever_exports);
var import_genkit = require("genkit");
function toContent(d, contentField) {
  if (typeof contentField === "function") {
    return contentField(d);
  }
  return [{ text: d.get(contentField) }];
}
function toDocuments(result, vectorField, contentField, metadataFields) {
  return result.docs.map((d) => {
    const out = { content: toContent(d, contentField) };
    if (typeof metadataFields === "function") {
      out.metadata = metadataFields(d);
      return out;
    }
    out.metadata = { id: d.id };
    if (metadataFields) {
      for (const field of metadataFields) {
        out.metadata[field] = d.get(field);
      }
      return out;
    }
    out.metadata = d.data();
    delete out.metadata[vectorField];
    if (typeof contentField === "string") delete out.metadata[contentField];
    return out;
  });
}
function defineFirestoreRetriever(ai, config) {
  const {
    name,
    label,
    firestore,
    embedder,
    collection,
    vectorField,
    metadataFields,
    contentField,
    distanceMeasure
  } = config;
  return ai.defineRetriever(
    {
      name,
      info: {
        label: label || `Firestore - ${name}`
      },
      configSchema: import_genkit.z.object({
        where: import_genkit.z.record(import_genkit.z.any()).optional(),
        limit: import_genkit.z.number(),
        /* Supply or override the collection for retrieval. */
        collection: import_genkit.z.string().optional()
      })
    },
    (input, options) => __async(this, null, function* () {
      const embedding = yield ai.embed({ embedder, content: input });
      if (!options.collection && !collection) {
        throw new Error(
          "Must specify a collection to query in Firestore retriever."
        );
      }
      let query = firestore.collection(
        options.collection || collection
      );
      for (const field in options.where || {}) {
        query = query.where(field, "==", options.where[field]);
      }
      const result = yield query.findNearest(vectorField, embedding, {
        limit: options.limit || 10,
        distanceMeasure: distanceMeasure || "COSINE"
      }).get();
      return {
        documents: toDocuments(
          result,
          vectorField,
          contentField,
          metadataFields
        )
      };
    })
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defineFirestoreRetriever
});
//# sourceMappingURL=firestoreRetriever.js.map